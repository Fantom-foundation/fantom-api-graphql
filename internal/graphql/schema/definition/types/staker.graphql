# Represents staker information.
type Staker {
    # ID number the staker.
    id: BigInt!

    # Staker address.
    stakerAddress: Address!

    # Amount of total staked tokens in WEI.
    totalStake: BigInt

    # Amount of own staked tokens in WEI.
    stake: BigInt!

    # Amount of tokens delegated to the staker in WEI.
    delegatedMe: BigInt!

    # Maximum total amount of tokens allowed to be delegated
    # to the staker in WEI.
    # This value depends on the amount of self staked tokens.
    totalDelegatedLimit: BigInt!

    # Maximum amount of tokens allowed to be delegated to the staker
    # on a new delegation in WEI.
    # This value depends on the amount of self staked tokens.
    delegatedLimit: BigInt!

    # Is this a validator record.
    isValidator: Boolean!

    # Is the staker active.
    isActive: Boolean!

    # Is TRUE for validators withdrawing their validation stake.
    isWithdrawn: Boolean!

    # Is the staker considered to be cheater.
    isCheater: Boolean!

    # Is the staker offline.
    isOffline: Boolean!

    # isStakeLocked signals if the staker locked the stake.
    isStakeLocked: Boolean!

    # Epoch in which the staker was created.
    createdEpoch: Long!

    # Timestamp of the staker creation.
    createdTime: Long!

    # lockedFromEpoch is the identifier of the epoch the stake lock was created.
    lockedFromEpoch: Long!

    # lockedUntil is the timestamp up to which the stake is locked, zero if not locked.
    lockedUntil: Long!

    # Epoch in which the staker was deactivated.
    deactivatedEpoch: Long!

    # Timestamp of the staker deactivation.
    deactivatedTime: Long!

    # How many blocks the staker missed.
    missedBlocks: Long!

    # Number of seconds the staker is offline.
    downtime: Long!

    # List of delegations of this staker. Cursor is used to obtain specific slice
    # of the staker delegations. The most recent delegations
    # are provided if cursor is omitted.
    delegations(cursor: Cursor, count: Int = 25):DelegationList!

    # Status is a binary encoded status of the staker.
    # Ok = 0, bin 1 = Fork Detected, bin 256 = Validator Offline
    status: Long!

    # StakerInfo represents extended staker information from smart contract.
    stakerInfo: StakerInfo
}

# StakerFlagFilter represents a filter type for stakers with the given flag.
enum StakerFlagFilter {
    IS_ACTIVE
    IS_WITHDRAWN
    IS_OFFLINE
    IS_CHEATER
}
